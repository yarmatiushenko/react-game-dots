{"version":3,"sources":["reducers/reducer.js","store/store.js","constants/constants.js","actions/actions.js","services/GameService.js","components/GameMode/GameMode.js","components/GameArea/GameArea.js","components/Spinner/Spinner.js","components/GameWinners/GameWinners.js","containers/Game/index.js","App.js","serviceWorker.js","index.js"],"names":["initialState","loading","winners","userName","userMode","delay","userNameError","userModeError","gameWinner","endGame","startGame","arrayGameField","gameSetting","gameMode","error","store","createStore","state","action","type","payload","idx","findIndex","element","field","map","item","status","id","applyMiddleware","thunkMiddleware","service","_apiBase","getResource","url","a","fetch","res","ok","Error","json","setResources","data","method","headers","body","JSON","stringify","getGameSetting","setGameWinners","getGameWinners","fetchLoader","fetchWinnersSuccess","setUserModeName","mode","addElementField","size","arrayElement","i","Math","pow","push","fetchError","GameMode","handleSubmit","handleChangeMode","handleChangeName","onSubmit","className","onChange","value","disabled","index","key","placeholder","GameArea","handleClick","style","maxWidth","background","onClick","Spinner","GameWinners","winner","date","Game","event","target","props","setUserName","setUserMode","changeElementStatus","preventDefault","setUserNameError","setUserModeError","startUserGame","interval","sendUserWinners","user","endUserGame","setWinners","sendData","Date","month","toLocaleString","toTimeString","slice","getDate","getFullYear","setInterval","inactiveCell","filter","activeCell","userCell","compCell","length","clearInterval","activeCellIdx","activeCellId","el","inActiveCellId","floor","random","this","getGameMode","getWinners","React","Component","mapDispatchToProps","dispatch","then","newData","Object","values","array","name","connect","userSetting","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.94d2a4cd.chunk.js","sourcesContent":["import {\n    FETCH_ERROR,\n    FETCH_LOADER,\n    FETCH_SETTING_SUCCESS,\n    SET_USER_NAME,\n    SET_USER_MODE,\n    SET_USER_MODE_ERROR,\n    SET_USER_NAME_ERROR,\n    START_USER_GAME,\n    ADD_ELEMENT_FIELD,\n    CHANGE_ELEMENT_STATUS,\n    END_USER_GAME,\n    FETCH_WINNERS_SUCCESS\n} from \"../constants/constants\";\n\nconst initialState = {\n    loading: false,\n    winners: [],\n    userName: '',\n    userMode: '',\n    delay: '',\n    userNameError: '',\n    userModeError: '',\n    gameWinner: '',\n    endGame: false,\n    startGame: false,\n    arrayGameField: [],\n    gameSetting: [],\n    gameMode: [],\n    error: null\n};\n\n\nexport function gameReducer(state = initialState, action) {\n    switch (action.type) {\n        case FETCH_LOADER:\n            return {\n                ...state,\n                loading: true\n            };\n        case FETCH_SETTING_SUCCESS:\n            return {\n                ...state,\n\n                gameSetting: action.payload,\n                gameMode: action.payload\n            };\n        case FETCH_WINNERS_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                winners: action.payload\n            };\n        case SET_USER_NAME:\n            return {\n                ...state,\n                userName: action.payload,\n                userNameError: ''\n            };\n        case SET_USER_NAME_ERROR:\n            return {\n                ...state,\n                userNameError: action.payload\n            };\n        case SET_USER_MODE_ERROR:\n            return {\n                ...state,\n                userModeError: action.payload\n            };\n        case SET_USER_MODE:\n            const idx = state.gameSetting.findIndex(element => element.field === +action.payload);\n            const delay = state.gameSetting[idx].delay;\n            return {\n                ...state,\n                userMode: action.payload,\n                delay,\n                userModeError: ''\n            };\n\n        case START_USER_GAME:\n            return {\n                ...state,\n                endGame: false,\n                startGame: true,\n                gameWinner: \"\",\n                arrayGameField: state.arrayGameField.map(item => item.status === 0 ?\n                    item : {...item, status: 0}\n                )\n            };\n        case END_USER_GAME:\n            return {\n                ...state,\n                startGame: false,\n                endGame: true,\n                gameWinner: action.payload,\n\n            };\n        case ADD_ELEMENT_FIELD:\n            return {\n                ...state,\n                arrayGameField: action.payload\n            };\n\n        case CHANGE_ELEMENT_STATUS:\n\n            return {\n                ...state,\n                arrayGameField: state.arrayGameField.map(item => item.id === action.idx ?\n                    {...item, status: action.status} : item\n                )\n            };\n\n        case FETCH_ERROR:\n            return {\n                ...state,\n                loading: false,\n                error: action.payload\n            };\n\n        default:\n            return state;\n    }\n}","import { createStore, applyMiddleware} from 'redux';\nimport {gameReducer} from '../reducers/reducer'\nimport thunkMiddleware from 'redux-thunk';\n\n// import { createLogger } from 'redux-logger';\n\n// const loggerMiddleware = createLogger();\nexport const store = createStore(\n    gameReducer,\n    applyMiddleware(\n        thunkMiddleware,\n        // loggerMiddleware\n    )\n);\n","const FETCH_SETTING_SUCCESS = \"FETCH_SETTING_SUCCESS\";\nconst  FETCH_LOADER = \"FETCH_LOADER\";\nconst FETCH_WINNERS_SUCCESS = \"FETCH_WINNERS_SUCCESS\";\nconst FETCH_ERROR = \"FETCH_ERROR\";\nconst SET_USER_NAME = \"SET_USER_NAME\";\nconst SET_USER_MODE = \"SET_USER_MODE\";\nconst SET_USER_NAME_ERROR = \"SET_USER_NAME_ERROR\";\nconst SET_USER_MODE_ERROR = \"SET_USER_MODE_ERROR\";\nconst START_USER_GAME = \"START_USER_GAME\";\nconst ADD_ELEMENT_FIELD = 'ADD_ELEMENT_FIELD';\nconst CHANGE_ELEMENT_STATUS = \"CHANGE_ELEMENT_STATUS\";\nconst END_USER_GAME = \"END_USER_GAME\";\n\n\n\nexport {\n    FETCH_SETTING_SUCCESS,\n    FETCH_WINNERS_SUCCESS,\n    FETCH_LOADER,\n    FETCH_ERROR,\n    SET_USER_NAME,\n    SET_USER_MODE,\n    SET_USER_NAME_ERROR,\n    SET_USER_MODE_ERROR,\n    START_USER_GAME,\n    ADD_ELEMENT_FIELD,\n    CHANGE_ELEMENT_STATUS,\n    END_USER_GAME\n}","import GameService from \"../services/GameService\";\nimport {\n    FETCH_ERROR, FETCH_LOADER, FETCH_SETTING_SUCCESS, SET_USER_NAME, SET_USER_MODE, SET_USER_NAME_ERROR,\n    SET_USER_MODE_ERROR, ADD_ELEMENT_FIELD, CHANGE_ELEMENT_STATUS, START_USER_GAME, END_USER_GAME, FETCH_WINNERS_SUCCESS\n} from \"../constants/constants\";\n\nconst service = new GameService();\n\n\n\n\n\nexport const getGameMode = () => {\n    return dispatch => {\n        service.getGameSetting()\n            .then(\n                (data) => {\n                    const array = (data) => {\n\n                        for (let key in data) {\n                            data[key].mode = key\n                        }\n                        return data;\n\n                    };\n                    const newData = Object.values(array(data));\n                    dispatch(fetchSettingSuccess(newData));\n                },\n                error => {\n                    dispatch(fetchError(error));\n                }\n            );\n    }\n};\n\nexport const getWinners = () => {\n    return dispatch => {\n        dispatch(fetchLoader());\n        service.getGameWinners()\n            .then(\n                (data) => {\n                    dispatch(fetchWinnersSuccess(data));\n\n                },\n                error => {\n                    dispatch(fetchError(error));\n                }\n            );\n    }\n};\n\nconst fetchLoader = () => {\n    return {\n        type: FETCH_LOADER\n    }\n};\nexport const setWinners = (data) => {\n    return dispatch => {\n        dispatch(fetchLoader());\n        service.setGameWinners(data)\n            .then(\n                (data) => {\n                    dispatch(fetchWinnersSuccess(data));\n                },\n                error => {\n                    dispatch(fetchError(error));\n                }\n            );\n    }\n};\nexport const fetchWinnersSuccess = (payload) => {\n    return {\n        type: FETCH_WINNERS_SUCCESS,\n        payload\n    }\n};\nexport const startUserGame = () => {\n    return {\n        type: START_USER_GAME,\n    }\n};\n\nexport const setUserName = (name) => {\n    return {\n        type: SET_USER_NAME,\n        payload: name\n    }\n};\nexport const setUserMode = (field) => {\n    return dispatch => {\n\n        dispatch(setUserModeName(field));\n        dispatch(addElementField(field));\n\n    }\n};\n\n\nexport const setUserModeName = (mode) => {\n    return {\n        type: SET_USER_MODE,\n        payload: mode\n    }\n};\n\nexport const setUserNameError = (error) => {\n    return {\n        type: SET_USER_NAME_ERROR,\n        payload: error\n    }\n};\n\nexport const setUserModeError = (error) => {\n    return {\n        type: SET_USER_MODE_ERROR,\n        payload: error\n    }\n};\n\n\nexport const changeElementStatus = (idx, status) => {\n    return {\n        type: CHANGE_ELEMENT_STATUS,\n        idx,\n        status\n    }\n};\nexport const endUserGame = (payload) => {\n    return {\n        type: END_USER_GAME,\n        payload\n    }\n\n};\nexport const addElementField = (size) => {\n    let arrayElement = [];\n    for (let i = 0; i < Math.pow(size, 2); i++) {\n        arrayElement.push({\n            id: i,\n            status: 0\n        })\n    }\n\n    return {\n        type: ADD_ELEMENT_FIELD,\n        payload: arrayElement\n    }\n};\n\nfunction fetchSettingSuccess(payload) {\n    return {\n        type: FETCH_SETTING_SUCCESS,\n        payload\n    }\n}\n\nfunction fetchError(error) {\n    return {\n        type: FETCH_ERROR,\n        error: error\n    }\n}\n","\n\n\nexport default class GameService {\n\n    _apiBase = 'https://starnavi-frontend-test-task.herokuapp.com';\n\n    getResource = async (url) => {\n        const res = await fetch(`${this._apiBase}${url}`);\n\n        if (!res.ok) {\n            throw new Error(`Could not fetch ${this._apiBase}${url}, received ${res.status}`)\n        }\n        return await res.json();\n    };\n\n    setResources = async (url, data) => {\n        const res = await fetch(`${this._apiBase}${url}`, {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n\n        });\n        if (!res.ok) {\n            throw new Error(`Could not fetch ${this._apiBase}${url}, received ${res.status}`)\n        }\n        return await res.json();\n    };\n\n    getGameSetting = async () => {\n        const res = await this.getResource(`/game-settings`);\n        return res;\n    };\n\n    setGameWinners = async (data) => {\n        const res = await this.setResources(`/winners`, data);\n        return res;\n    }\n\n    getGameWinners = async () => {\n        const res = await this.getResource(`/winners`);\n        return res;\n    };\n}","import React from \"react\";\nimport './style.css'\n\nconst GameMode = ({gameMode, userMode, userName, userModeError, userNameError, handleSubmit, startGame, endGame, handleChangeMode, handleChangeName}) => {\n    return (\n        <div>\n            <form onSubmit={handleSubmit}>\n                <div className=\"form-mode\">\n                    <div className=\"form-mode__group\">\n                        <select onChange={handleChangeMode} value={userMode} disabled={startGame ? \"disabled\" : \"\"}>\n                            <option value=\"\">Pick game mode</option>\n                            {gameMode.map((item, index) => {\n                                return (\n                                    <option value={item.field} key={index}>{item.mode}</option>\n                                )\n                            })}\n                        </select>\n                        {userModeError ? <span className=\"form-error\">{userModeError}</span> : ''}\n                    </div>\n                    <div className=\"form-mode__group\">\n                        <input type=\"text\" placeholder=\"Enter your name\" value={userName}\n                               disabled={startGame ? \"disabled\" : \"\"}\n                               onChange={handleChangeName}/>\n                        {userNameError ? <span className=\"form-error\">{userNameError}</span> : ''}\n                    </div>\n                    <div className=\"form-mode__group\">\n                        <button disabled={startGame ? \"disabled\" : \"\"}>{endGame ? \"Play again\" : \"Play\"}</button>\n                    </div>\n                </div>\n            </form>\n        </div>\n    )\n};\nexport default GameMode;\n\n\n\n\n\n\n","import React from \"react\";\nimport './style.css'\n\n\nconst GameArea = ({arrayGameField, userMode, gameWinner, handleClick}) => {\n    return (\n        <div className=\"game-wrapper\">\n            <h4 className=\"game-winner\">{gameWinner ? `${gameWinner} won!` : ''}</h4>\n            <div className=\"game-area\" style={{maxWidth: `${50 * userMode}px`}}>\n                {arrayGameField.map(element => {\n\n                    return (\n                        <div style={{\n                            background:\n                                element.status === 2\n                                    ? '#00E871'\n                                    : element.status === 1\n                                    ? '#42D8E8'\n                                    : element.status === 3\n                                        ? '#E85A5F'\n                                        : '#fff'\n                        }} className=\"game-area-item\" key={element.id}\n                             onClick={() => handleClick(element.id, element.status)}/>\n                    )\n                })}\n            </div>\n        </div>\n    )\n};\nexport default GameArea;\n\n\n","import React from \"react\";\nimport \"./style.css\"\n const Spinner = () => {\n    return (\n        <div className=\"loader\">\n            <div className=\"inner one\"/>\n            <div className=\"inner two\"/>\n            <div className=\"inner three\"/>\n        </div>\n    )\n};\n\n\nexport default Spinner;","import React from \"react\";\nimport Spinner from \"../Spinner/Spinner\"\nimport './style.css'\n\nconst GameWinners = ({winners, loading}) => {\n\n        return (\n            <div className=\"winner-wrapper\">\n                <h2>Leader Board</h2>\n                {loading ? <Spinner/> :\n                    winners.map((item) => {\n                        return (\n                            <div key={item.id} className=\"winners\">\n                                <div className=\"winners-item\">{item.winner}</div>\n                                <div className=\"winners-item\">{item.date}</div>\n                            </div>\n                        )\n                    })\n                }\n            </div>\n        );\n    };\n\nexport default GameWinners;\n\n\n\n\n","import React from \"react\";\nimport './style.css'\nimport {connect} from \"react-redux\";\nimport {\n    getGameMode,\n    setUserMode,\n    setUserName,\n    setUserModeError,\n    setUserNameError,\n    startUserGame,\n    changeElementStatus,\n    endUserGame,\n    getWinners,\n    setWinners\n} from \"../../actions/actions\"\nimport GameMode from \"../../components/GameMode/GameMode\";\nimport GameArea from \"../../components/GameArea/GameArea\";\nimport GameWinners from \"../../components/GameWinners/GameWinners\";\n\n\nclass Game extends React.Component {\n\n\n    componentDidMount() {\n        this.props.getGameMode();\n        this.props.getWinners();\n    }\n\n    handleChangeName = (event) => {\n        const {value} = event.target;\n        this.props.setUserName(value);\n    };\n    handleChangeMode = (event) => {\n        const {value} = event.target;\n        this.props.setUserMode(value);\n\n    };\n    handleClick = (id, status) => {\n        const {arrayGameField} = this.props;\n        if (status === 1) {\n            const idx = arrayGameField.findIndex(element => element.id === id);\n            this.props.changeElementStatus(idx, 2)\n        }\n\n    };\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        const {userName, userMode} = this.props;\n        if (userName === '') {\n            this.props.setUserNameError(\"Invalid user name\");\n            return false;\n        } else if (userMode === '') {\n            this.props.setUserModeError(\"Invalid user mode\");\n            return false;\n        } else {\n            this.props.startUserGame();\n            this.interval();\n        }\n    };\n\n\n    sendUserWinners = (user) => {\n        this.props.endUserGame(user);\n        this.props.setWinners(this.sendData());\n    };\n\n    sendData = () => {\n        const {gameWinner} = this.props;\n        const date = new Date();\n        const month = date.toLocaleString('default', {month: 'long'});\n        const dateToSend = `${date.toTimeString().slice(0, 5)} ${date.getDate()} ${month}  ${date.getFullYear()}`;\n\n\n        return {\n            winner: gameWinner,\n            date: dateToSend\n        }\n    };\n\n\n    interval = () => {\n        const interval = setInterval(() => {\n            const {arrayGameField} = this.props;\n            const inactiveCell = arrayGameField.filter((item) => item.status === 0);\n            const activeCell = arrayGameField.filter((item) => item.status === 1);\n            const userCell = arrayGameField.filter((item) => item.status === 2);\n            const compCell = arrayGameField.filter((item) => item.status === 3);\n\n            if (userCell.length > arrayGameField.length / 2) {\n                clearInterval(interval);\n                this.sendUserWinners(this.props.userName);\n                return false;\n\n            }\n            if (compCell.length > arrayGameField.length / 2) {\n                clearInterval(interval);\n                this.sendUserWinners(\"Computer\");\n                return false;\n\n            }\n\n            if (activeCell.length) {\n                const activeCellIdx = activeCell.findIndex(element => element.status === 1);\n                const activeCellId = activeCell[activeCellIdx].id;\n                const el = arrayGameField.findIndex(element => element.id === activeCellId);\n                this.props.changeElementStatus(el, 3);\n            } else if (inactiveCell.length) {\n                const ridx = Math.floor((Math.random() * inactiveCell.length));\n                const inActiveCellId = inactiveCell[ridx].id;\n                const idx = arrayGameField.findIndex(element => element.id === inActiveCellId);\n                this.props.changeElementStatus(idx, 1);\n            } else {\n                clearInterval(interval)\n            }\n\n        }, this.props.delay);\n    };\n\n\n    render() {\n        const {\n            loading, gameMode, userMode, userName, userNameError, userModeError,\n            arrayGameField, getWinners, startGame, winners, gameWinner, endGame\n        } = this.props;\n        return (\n            <div className=\"container\">\n                <h1>Game In Dots</h1>\n                <div className=\"wrapper-area\">\n                    <div>\n\n                        <GameMode gameMode={gameMode}\n                                  userName={userName}\n                                  userMode={userMode}\n                                  userNameError={userNameError}\n                                  userModeError={userModeError}\n                                  handleSubmit={this.handleSubmit}\n                                  startGame={startGame}\n                                  endGame={endGame}\n                                  handleChangeName={this.handleChangeName}\n                                  handleChangeMode={this.handleChangeMode}\n                        />\n\n                        <GameArea arrayGameField={arrayGameField}\n                                  handleClick={this.handleClick}\n                                  userMode={userMode}\n                                  gameWinner={gameWinner}/>\n                    </div>\n\n\n                    <GameWinners getWinners={getWinners}\n                                 winners={winners} loading={loading}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    const {\n        loading, gameSetting, gameMode, userSetting, userName, userMode, userModeError, userNameError,\n        arrayGameField, startGame, winners, gameWinner, endGame, delay\n    } = state;\n\n    return {\n        loading,\n        gameSetting,\n        delay,\n        gameMode,\n        userSetting,\n        userName,\n        userMode,\n        userNameError,\n        userModeError,\n        arrayGameField,\n        startGame,\n        winners,\n        gameWinner,\n        endGame\n\n    };\n}\n\nconst mapDispatchToProps = {\n    getGameMode,\n    getWinners,\n    setUserName,\n    setUserMode,\n    setUserModeError,\n    setUserNameError,\n    startUserGame,\n    changeElementStatus,\n    endUserGame,\n    setWinners\n\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","import React from 'react';\nimport Game from \"./containers/Game\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Game/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {store} from './store/store'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}