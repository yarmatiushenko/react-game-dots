{"version":3,"sources":["reducers/reducer.js","store/store.js","constants/constants.js","actions/actions.js","services/GameService.js","components/GameMode/GameMode.js","components/Spinner/Spinner.js","components/GameWinners/GameWinners.js","components/GameArea/GameArea.js","containers/Game/index.js","App.js","serviceWorker.js","index.js"],"names":["initialState","loading","winners","userName","userMode","delay","userNameError","userModeError","gameWinner","endGame","startGame","arrayGameField","gameSetting","gameMode","error","middleware","createLogger","applyMiddleware","thunkMiddleware","store","createStore","state","action","type","payload","idx","findIndex","element","field","map","item","status","id","service","_apiBase","getResource","url","a","fetch","res","ok","Error","json","setResources","data","method","headers","body","JSON","stringify","getGameSetting","setGameWinners","getGameWinners","fetchLoader","fetchWinnersSuccess","setUserModeName","mode","addElementField","size","arrayElement","i","Math","pow","push","nanoid","fetchError","GameMode","handleSubmit","handleChangeMode","handleChangeName","onSubmit","className","onChange","value","disabled","key","placeholder","Spinner","GameWinners","winner","date","GameArea","handleClick","style","maxWidth","background","onClick","propTypes","PropTypes","array","func","string","Game","event","target","props","setUserName","setUserMode","changeElementStatus","preventDefault","setUserNameError","setUserModeError","startUserGame","interval","sendUserWinners","user","endUserGame","setWinners","sendData","Date","month","toLocaleString","toTimeString","slice","getDate","getFullYear","setInterval","inactiveCell","filter","activeCell","userCell","compCell","length","clearInterval","activeCellIdx","activeCellId","inActiveCellId","floor","random","this","getGameMode","getWinners","React","Component","mapDispatchToProps","dispatch","then","newData","Object","values","name","connect","userSetting","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.728121a9.chunk.js","sourcesContent":["import {\n  FETCH_ERROR,\n  FETCH_LOADER,\n  FETCH_SETTING_SUCCESS,\n  SET_USER_NAME,\n  SET_USER_MODE,\n  SET_USER_MODE_ERROR,\n  SET_USER_NAME_ERROR,\n  START_USER_GAME,\n  ADD_ELEMENT_FIELD,\n  CHANGE_ELEMENT_STATUS,\n  END_USER_GAME,\n  FETCH_WINNERS_SUCCESS\n} from \"../constants/constants\";\n\nconst initialState = {\n  loading: false,\n  winners: [],\n  userName: '',\n  userMode: '',\n  delay: '',\n  userNameError: '',\n  userModeError: '',\n  gameWinner: '',\n  endGame: false,\n  startGame: false,\n  arrayGameField: [],\n  gameSetting: [],\n  gameMode: [],\n  error: null\n};\n\n\nexport function gameReducer(state = initialState, action) {\n  switch (action.type) {\n    case FETCH_LOADER:\n      return {\n        ...state,\n        loading: true\n      };\n    case FETCH_SETTING_SUCCESS:\n      return {\n        ...state,\n\n        gameSetting: action.payload,\n        gameMode: action.payload\n      };\n    case FETCH_WINNERS_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        winners: action.payload\n      };\n    case SET_USER_NAME:\n      return {\n        ...state,\n        userName: action.payload,\n        userNameError: ''\n      };\n    case SET_USER_NAME_ERROR:\n      return {\n        ...state,\n        userNameError: action.payload\n      };\n    case SET_USER_MODE_ERROR:\n      return {\n        ...state,\n        userModeError: action.payload\n      };\n    case SET_USER_MODE:\n      // eslint-disable-next-line no-case-declarations\n      const idx = state.gameSetting.findIndex(element => element.field === +action.payload);\n      // eslint-disable-next-line no-case-declarations\n      const delay = state.gameSetting[idx].delay;\n      return {\n        ...state,\n        userMode: action.payload,\n        delay,\n        userModeError: ''\n      };\n\n    case START_USER_GAME:\n      return {\n        ...state,\n        endGame: false,\n        startGame: true,\n        gameWinner: \"\",\n        arrayGameField: state.arrayGameField.map(item => item.status === 0 ?\n          item : {...item, status: 0}\n        )\n      };\n    case END_USER_GAME:\n      return {\n        ...state,\n        startGame: false,\n        endGame: true,\n        gameWinner: action.payload,\n\n      };\n    case ADD_ELEMENT_FIELD:\n      return {\n        ...state,\n        arrayGameField: action.payload\n      };\n\n    case CHANGE_ELEMENT_STATUS:\n\n      return {\n        ...state,\n        arrayGameField: state.arrayGameField.map(item => item.id === action.id ?\n          {...item, status: action.status} : item\n        )\n      };\n\n    case FETCH_ERROR:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n}","import { createStore, applyMiddleware} from 'redux';\nimport {gameReducer} from '../reducers/reducer';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\n\n\nconst IS_DEV = process.env.NODE_ENV !== 'production';\nconst loggerMiddleware = createLogger();\nlet middleware;\n\nif (IS_DEV) {\n  middleware = applyMiddleware(\n    thunkMiddleware,\n    loggerMiddleware\n  );\n} else {\n  middleware = applyMiddleware(\n    thunkMiddleware,\n  );\n}\n\n\n\nexport const store = createStore(\n  gameReducer,\n  middleware\n\n);\n","const FETCH_SETTING_SUCCESS = \"FETCH_SETTING_SUCCESS\";\nconst  FETCH_LOADER = \"FETCH_LOADER\";\nconst FETCH_WINNERS_SUCCESS = \"FETCH_WINNERS_SUCCESS\";\nconst FETCH_ERROR = \"FETCH_ERROR\";\nconst SET_USER_NAME = \"SET_USER_NAME\";\nconst SET_USER_MODE = \"SET_USER_MODE\";\nconst SET_USER_NAME_ERROR = \"SET_USER_NAME_ERROR\";\nconst SET_USER_MODE_ERROR = \"SET_USER_MODE_ERROR\";\nconst START_USER_GAME = \"START_USER_GAME\";\nconst ADD_ELEMENT_FIELD = 'ADD_ELEMENT_FIELD';\nconst CHANGE_ELEMENT_STATUS = \"CHANGE_ELEMENT_STATUS\";\nconst END_USER_GAME = \"END_USER_GAME\";\n\n\n\nexport {\n  FETCH_SETTING_SUCCESS,\n  FETCH_WINNERS_SUCCESS,\n  FETCH_LOADER,\n  FETCH_ERROR,\n  SET_USER_NAME,\n  SET_USER_MODE,\n  SET_USER_NAME_ERROR,\n  SET_USER_MODE_ERROR,\n  START_USER_GAME,\n  ADD_ELEMENT_FIELD,\n  CHANGE_ELEMENT_STATUS,\n  END_USER_GAME\n};","import GameService from \"../services/GameService\";\nimport {\n  FETCH_ERROR, FETCH_LOADER, FETCH_SETTING_SUCCESS, SET_USER_NAME, SET_USER_MODE, SET_USER_NAME_ERROR,\n  SET_USER_MODE_ERROR, ADD_ELEMENT_FIELD, CHANGE_ELEMENT_STATUS, START_USER_GAME, END_USER_GAME, FETCH_WINNERS_SUCCESS\n} from \"../constants/constants\";\nimport nanoid from 'nanoid';\n\n\nconst service = new GameService();\n\n\nexport const getGameMode = () => {\n  return dispatch => {\n    service.getGameSetting()\n      .then(\n        (data) => {\n          const array = (data) => {\n            let i = 0;\n            for (let key in data) {\n              i++;\n              data[key].mode = key;\n              data[key].id = nanoid(4) + i;\n            }\n            return data;\n\n          };\n          const newData = Object.values(array(data));\n          dispatch(fetchSettingSuccess(newData));\n        },\n        error => {\n          dispatch(fetchError(error));\n        }\n      );\n  };\n};\n\nexport const getWinners = () => {\n  return dispatch => {\n    dispatch(fetchLoader());\n    service.getGameWinners()\n      .then(\n        (data) => {\n          dispatch(fetchWinnersSuccess(data));\n\n        },\n        error => {\n          dispatch(fetchError(error));\n        }\n      );\n  };\n};\n\nconst fetchLoader = () => {\n  return {\n    type: FETCH_LOADER\n  };\n};\nexport const setWinners = (data) => {\n  return dispatch => {\n    dispatch(fetchLoader());\n    service.setGameWinners(data)\n      .then(\n        (data) => {\n          dispatch(fetchWinnersSuccess(data));\n        },\n        error => {\n          dispatch(fetchError(error));\n        }\n      );\n  };\n};\nexport const fetchWinnersSuccess = (payload) => {\n  return {\n    type: FETCH_WINNERS_SUCCESS,\n    payload\n  };\n};\nexport const startUserGame = () => {\n  return {\n    type: START_USER_GAME,\n  };\n};\n\nexport const setUserName = (name) => {\n  return {\n    type: SET_USER_NAME,\n    payload: name\n  };\n};\nexport const setUserMode = (field) => {\n  return dispatch => {\n\n    dispatch(setUserModeName(field));\n    dispatch(addElementField(field));\n\n  };\n};\n\n\nexport const setUserModeName = (mode) => {\n  return {\n    type: SET_USER_MODE,\n    payload: mode\n  };\n};\n\nexport const setUserNameError = (error) => {\n  return {\n    type: SET_USER_NAME_ERROR,\n    payload: error\n  };\n};\n\nexport const setUserModeError = (error) => {\n  return {\n    type: SET_USER_MODE_ERROR,\n    payload: error\n  };\n};\n\n\nexport const changeElementStatus = (id, status) => {\n  return {\n    type: CHANGE_ELEMENT_STATUS,\n    id,\n    status\n  };\n};\nexport const endUserGame = (payload) => {\n  return {\n    type: END_USER_GAME,\n    payload\n  };\n\n};\nexport const addElementField = (size) => {\n  let arrayElement = [];\n  for (let i = 0; i < Math.pow(size, 2); i++) {\n    arrayElement.push({\n      id: nanoid(4)+i,\n      status: 0\n    });\n  }\n\n  return {\n    type: ADD_ELEMENT_FIELD,\n    payload: arrayElement\n  };\n};\n\nfunction fetchSettingSuccess(payload) {\n  return {\n    type: FETCH_SETTING_SUCCESS,\n    payload\n  };\n}\n\nfunction fetchError(error) {\n  return {\n    type: FETCH_ERROR,\n    error: error\n  };\n}\n","\n\n\nexport default class GameService {\n\n    _apiBase = 'https://starnavi-frontend-test-task.herokuapp.com';\n\n    getResource = async (url) => {\n      const res = await fetch(`${this._apiBase}${url}`);\n\n      if (!res.ok) {\n        throw new Error(`Could not fetch ${this._apiBase}${url}, received ${res.status}`);\n      }\n      return await res.json();\n    };\n\n    setResources = async (url, data) => {\n      const res = await fetch(`${this._apiBase}${url}`, {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n\n      });\n      if (!res.ok) {\n        throw new Error(`Could not fetch ${this._apiBase}${url}, received ${res.status}`);\n      }\n      return await res.json();\n    };\n\n    getGameSetting = async () => {\n      const res = await this.getResource(`/game-settings`);\n      return res;\n    };\n\n    setGameWinners = async (data) => {\n      const res = await this.setResources(`/winners`, data);\n      return res;\n    }\n\n    getGameWinners = async () => {\n      const res = await this.getResource(`/winners`);\n      return res;\n    };\n}","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport './style.css';\n\nconst GameMode = ({gameMode, userMode, userName, userModeError, userNameError, handleSubmit, startGame, endGame, handleChangeMode, handleChangeName}) => {\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <div className=\"form-mode\">\n          <div className=\"form-mode__group\">\n            <select onChange={handleChangeMode} value={userMode} disabled={startGame ? \"disabled\" : \"\"}>\n              <option value=\"\">Pick game mode</option>\n              {gameMode.map(item => {\n                return (\n                  <option value={item.field} key={item.id}>{item.mode}</option>\n                );\n              })}\n            </select>\n            {userModeError ? <span className=\"form-error\">{userModeError}</span> : ''}\n          </div>\n          <div className=\"form-mode__group\">\n            <input type=\"text\" placeholder=\"Enter your name\" value={userName}\n              disabled={startGame ? \"disabled\" : \"\"}\n              onChange={handleChangeName}/>\n            {userNameError ? <span className=\"form-error\">{userNameError}</span> : ''}\n          </div>\n          <div className=\"form-mode__group\">\n            <button disabled={startGame ? \"disabled\" : \"\"}>{endGame ? \"Play again\" : \"Play\"}</button>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n};\nexport default GameMode;\n\nGameMode.propTypes = {\n  gameMode: PropTypes.array,\n  endGame: PropTypes.bool,\n  startGame: PropTypes.bool,\n  handleSubmit: PropTypes.func,\n  userModeError: PropTypes.string,\n  userNameError: PropTypes.string,\n  handleChangeMode: PropTypes.func,\n  handleChangeName: PropTypes.func,\n};\n\n\n\n\n","import React from \"react\";\nimport \"./style.css\";\nconst Spinner = () => {\n  return (\n    <div className=\"loader\">\n      <div className=\"inner one\"/>\n      <div className=\"inner two\"/>\n      <div className=\"inner three\"/>\n    </div>\n  );\n};\n\n\nexport default Spinner;","import React from \"react\";\nimport Spinner from \"../Spinner/Spinner\";\nimport './style.css';\nimport PropTypes from 'prop-types';\n\nconst GameWinners = ({winners, loading}) => {\n\n  return (\n    <div className=\"winner-wrapper\">\n      <h2>Leader Board</h2>\n      {loading ? <Spinner/> :\n        winners.map((item) => {\n          return (\n            <div key={item.id} className=\"winners\">\n              <div className=\"winners-item\">{item.winner}</div>\n              <div className=\"winners-item\">{item.date}</div>\n            </div>\n          );\n        })\n      }\n    </div>\n  );\n};\n\nexport default GameWinners;\n\nGameWinners.propTypes = {\n  winners: PropTypes.array,\n  loading: PropTypes.bool,\n};\n\n\n\n","import React from \"react\";\nimport './style.css';\nimport PropTypes from \"prop-types\";\nimport GameWinners from \"../GameWinners/GameWinners\";\n\n\nconst GameArea = ({arrayGameField, userMode, gameWinner, handleClick}) => {\n  return (\n    <div className=\"game-wrapper\">\n      <h4 className=\"game-winner\">{gameWinner ? `${gameWinner} won!` : ''}</h4>\n      <div className=\"game-area\" style={{maxWidth: `${50 * userMode}px`}}>\n        {arrayGameField.map(element => {\n\n          return (\n            <div style={{\n              background:\n                                element.status === 2\n                                  ? '#00E871'\n                                  : element.status === 1\n                                    ? '#42D8E8'\n                                    : element.status === 3\n                                      ? '#E85A5F'\n                                      : '#fff'\n            }} className=\"game-area-item\" key={element.id}\n            onClick={() => handleClick(element.id, element.status)}/>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\nexport default GameArea;\n\n\nGameWinners.propTypes = {\n  arrayGameField: PropTypes.array,\n  handleClick: PropTypes.func,\n  gameWinner: PropTypes.string,\n};\n\n","import React from \"react\";\nimport './style.css';\nimport {connect} from \"react-redux\";\nimport {\n  getGameMode,\n  setUserMode,\n  setUserName,\n  setUserModeError,\n  setUserNameError,\n  startUserGame,\n  changeElementStatus,\n  endUserGame,\n  getWinners,\n  setWinners\n} from \"../../actions/actions\";\nimport GameMode from \"../../components/GameMode/GameMode\";\nimport GameArea from \"../../components/GameArea/GameArea\";\nimport GameWinners from \"../../components/GameWinners/GameWinners\";\n\n\nclass Game extends React.Component {\n    \n  componentDidMount() {\n    this.props.getGameMode();\n    this.props.getWinners();\n  }\n\n    handleChangeName = (event) => {\n      const {value} = event.target;\n      this.props.setUserName(value);\n    };\n  \n    handleChangeMode = (event) => {\n      const {value} = event.target;\n      this.props.setUserMode(value);\n\n    };\n    \n    handleClick = (id, status) => {\n      if (status === 1) {\n        this.props.changeElementStatus(id, 2);\n      }\n\n    };\n\n    handleSubmit = (event) => {\n      event.preventDefault();\n      const {userName, userMode} = this.props;\n      if (userName === '') {\n        this.props.setUserNameError(\"Invalid user name\");\n        return false;\n      } else if (userMode === '') {\n        this.props.setUserModeError(\"Invalid user mode\");\n        return false;\n      } else {\n        this.props.startUserGame();\n        this.interval();\n      }\n    };\n\n\n    sendUserWinners = (user) => {\n      this.props.endUserGame(user);\n      this.props.setWinners(this.sendData());\n    };\n\n    sendData = () => {\n      const {gameWinner} = this.props;\n      const date = new Date();\n      const month = date.toLocaleString('default', {month: 'long'});\n      const dateToSend = `${date.toTimeString().slice(0, 5)} ${date.getDate()} ${month}  ${date.getFullYear()}`;\n\n\n      return {\n        winner: gameWinner,\n        date: dateToSend\n      };\n    };\n\n\n    interval = () => {\n      const interval = setInterval(() => {\n        const {arrayGameField} = this.props;\n        const inactiveCell = arrayGameField.filter((item) => item.status === 0);\n        const activeCell = arrayGameField.filter((item) => item.status === 1);\n        const userCell = arrayGameField.filter((item) => item.status === 2);\n        const compCell = arrayGameField.filter((item) => item.status === 3);\n\n        if (userCell.length > arrayGameField.length / 2) {\n          clearInterval(interval);\n          this.sendUserWinners(this.props.userName);\n          return false;\n\n        }\n        if (compCell.length > arrayGameField.length / 2) {\n          clearInterval(interval);\n          this.sendUserWinners(\"Computer\");\n          return false;\n\n        }\n\n        if (activeCell.length) {\n          const activeCellIdx = activeCell.findIndex(element => element.status === 1);\n          const activeCellId = activeCell[activeCellIdx].id;\n          const idx = arrayGameField.findIndex(element => element.id === activeCellId);\n          const id = arrayGameField[idx].id;\n          this.props.changeElementStatus(id, 3);\n        } else if (inactiveCell.length) {\n          const ridx = Math.floor((Math.random() * inactiveCell.length));\n          const inActiveCellId = inactiveCell[ridx].id;\n\n          const idx = arrayGameField.findIndex(element => element.id === inActiveCellId);\n          const id = arrayGameField[idx].id;\n          this.props.changeElementStatus(id, 1);\n        } else {\n          clearInterval(interval);\n        }\n\n      }, this.props.delay);\n    };\n\n\n    render() {\n      const {\n        loading, gameMode, userMode, userName, userNameError, userModeError,\n        arrayGameField, getWinners, startGame, winners, gameWinner, endGame\n      } = this.props;\n      return (\n        <div className=\"container\">\n          <h1>Game In Dots</h1>\n          <div className=\"wrapper-area\">\n            <div>\n\n              <GameMode gameMode={gameMode}\n                userName={userName}\n                userMode={userMode}\n                userNameError={userNameError}\n                userModeError={userModeError}\n                handleSubmit={this.handleSubmit}\n                startGame={startGame}\n                endGame={endGame}\n                handleChangeName={this.handleChangeName}\n                handleChangeMode={this.handleChangeMode}\n              />\n\n              <GameArea arrayGameField={arrayGameField}\n                handleClick={this.handleClick}\n                userMode={userMode}\n                gameWinner={gameWinner}/>\n            </div>\n\n\n            <GameWinners getWinners={getWinners}\n              winners={winners} loading={loading}/>\n          </div>\n        </div>\n      );\n    }\n}\n\nfunction mapStateToProps(state) {\n  const {\n    loading, gameSetting, gameMode, userSetting, userName, userMode, userModeError, userNameError,\n    arrayGameField, startGame, winners, gameWinner, endGame, delay\n  } = state;\n\n  return {\n    loading,\n    gameSetting,\n    delay,\n    gameMode,\n    userSetting,\n    userName,\n    userMode,\n    userNameError,\n    userModeError,\n    arrayGameField,\n    startGame,\n    winners,\n    gameWinner,\n    endGame\n\n  };\n}\n\nconst mapDispatchToProps = {\n  getGameMode,\n  getWinners,\n  setUserName,\n  setUserMode,\n  setUserModeError,\n  setUserNameError,\n  startUserGame,\n  changeElementStatus,\n  endUserGame,\n  setWinners\n\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","import React from 'react';\nimport Game from \"./containers/Game\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {store} from './store/store';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}